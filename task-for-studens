require 'date'

class Student
  @@students = []

  attr_reader :surname, :name, :date_of_birth

  def initialize(surname, name, date_of_birth)
    @surname = surname
    @name = name

    begin
      @date_of_birth = Date.parse(date_of_birth)
    rescue ArgumentError
      raise ArgumentError, "date of birth must be in YYYY-MM-DD format!"
    end

    if @date_of_birth >= Date.today
      raise ArgumentError, "date of birth must be in the past!"
    end

    unless duplicate?
      @@students << self
    end
  end

  def duplicate?
    @@students.any? do |student|
      student.surname == @surname && student.name == @name && student.date_of_birth == @date_of_birth
    end
  end

  def calculate_age
    today = Date.today
    age = today.year - @date_of_birth.year
    age -= 1 if Date.new(today.year, @date_of_birth.month, @date_of_birth.day) > today
    age
  end

  def self.add_student(surname, name, date_of_birth)
    begin
      Student.new(surname, name, date_of_birth)
    rescue ArgumentError => e
      puts "error adding student: #{e.message}"
    end
  end

  def self.remove_student(surname, name, date_of_birth)
    @@students.reject! do |student|
      student.surname == surname && student.name == name && student.date_of_birth.to_s == date_of_birth
    end
  end

  def self.get_students_by_age(age)
    @@students.select { |student| student.calculate_age == age }
  end

  def self.get_students_by_name(name)
    @@students.select { |student| student.name == name }
  end

  def self.students
    @@students
  end

  def to_s
    "Student(surname: '#{@surname}', name: '#{@name}', date_of_birth: '#{@date_of_birth}')"
  end
end

begin
  student1 = Student.new('Selan', 'Nick', '2000-01-01')
  student2 = Student.new('Cheese', 'Charly', '1999-05-10')
  student3 = Student.new('Applewhite', 'Appli', '1998-12-31')
  student4 = Student.new('Daek', 'Nick', '2000-02-10')
rescue ArgumentError => e
  puts "Error creating student: #{e.message}"
end

puts "list of students after adding:"
puts Student.students

begin
  duplicate_student = Student.new('Selan', 'Nick', '2000-01-01')
rescue ArgumentError => e
  puts "error when adding duplicates: #{e.message}"
end


age = 24
students_by_age = Student.get_students_by_age(age)
puts "students age #{age}:"
puts students_by_age

students_by_name = Student.get_students_by_name('Nick')
puts "students with name Nick:"
puts students_by_name

Student.remove_student('Applewhite', 'Appli', '1998-12-31')
puts "List of students after deletion:"
puts Student.students

Student.students.each do |student|
  puts student.to_s
end
